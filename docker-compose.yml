version: '2.1'

services:

  minio:
    image: minio/minio
    container_name: minio
    command: server --console-address ":9001" /mnt/data
    ports:
        - 9000:9000
        - 9001:9001
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  postgres:
    image: library/postgres
    container_name: postgres
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres

  zookeeper:
    container_name: zookeeper
    image: strimzi/kafka:0.20.1-kafka-2.6.0
    command: [
      "sh", "-c",
      "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: "/tmp/logs"

  kafka:
    image: strimzi/kafka:0.20.1-kafka-2.6.0
    container_name: kafka
    command: [
      "sh", "-c",
      "bin/kafka-server-start.sh config/server.properties --override inter.broker.listener.name=$${KAFKA_INTER_BROKER_LISTENER_NAME} --override listener.security.protocol.map=$${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP} --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}"
    ]
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      LOG_DIR: "/tmp/logs"

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:legacy
    ports:
      - "8480:8080"
    volumes:
      - ./keycloak/kogito-realm.json:/tmp/kogito-realm.json
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/auth/realms/kogito" ]
      interval: 1s
      timeout: 1s
      retries: 50
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: postgres
      DB_USER: postgres
      DB_SCHEMA: public
      DB_PASSWORD: postgres
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      KEYCLOAK_IMPORT: /tmp/kogito-realm.json
    depends_on:
      postgres:
        condition: service_started

  data-index:
    container_name: data-index
    image: quay.io/kiegroup/kogito-data-index-postgresql:${KOGITO_VERSION}
    ports:
      - "8180:8080"
    depends_on:
      postgres:
        condition: service_started
      kafka:
        condition: service_started
    volumes:
      - ./persistence/:/home/kogito/data/protobufs/
    environment:
      QUARKUS_HIBERNATE_ORM_DATABASE_GENERATION: update
      QUARKUS_DATASOURCE_DB_KIND: postgresql
      QUARKUS_DATASOURCE_USERNAME: posgtres
      QUARKUS_DATASOURCE_PASSWORD: posgtres
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/posgtres
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KOGITO_DATA_INDEX_PROPS: -Dkogito.protobuf.folder=/home/kogito/data/protobufs/

  # jobs-service:
  #   container_name: jobs-service
  #   image: quay.io/kiegroup/kogito-jobs-service-postgresql:${KOGITO_VERSION}
  #   ports:
  #     - 8680:8080
  #   depends_on:
  #     postgres:
  #       condition: service_started
  #     kafka:
  #       condition: service_started
  #   environment:
  #     # KOGITO_SERVICE_URL: http://process-runtime-service-jvm:8080
  #     QUARKUS_DATASOURCE_REACTIVE_URL: postgresql://postgres:5432/jobs-service
  #     QUARKUS_DATASOURCE_DB_KIND: postgresql
  #     QUARKUS_DATASOURCE_USERNAME: jobs-service
  #     QUARKUS_DATASOURCE_PASSWORD: jobs-service
  #     QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/jobs-service
  #     QUARKUS_FLYWAY_MIGRATE_AT_START: "true"
  #     # QUARKUS_LOG_CONSOLE_LEVEL: debug
  #     KAFKA_BOOTSTRAP_SERVERS: kafka:29092

  graphql-engine:
    container_name: graphql-engine
    image: hasura/graphql-engine:latest
    ports:
    - 8580:8080
    depends_on:
      postgres:
        condition: service_started
    restart: always
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
      PG_DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: hasura
      HASURA_GRAPHQL_ENABLE_TELEMETRY: "false"
      HASURA_GRAPHQL_JWT_SECRET: '{"type": "RS256", "key": "-----BEGIN CERTIFICATE-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAi3vdJoJKvvx5Hyj6caFrKusyr6QgUyy7ibgNPSubAfI35vkaX6jJPb72slCkh3Nw/kU2npMkIMVLdh6fZTE+l3jwZDrFwBP8WPi17w90zUifGeoSOkoCeFjg9+HvZrEUyBI0FU8dW3SX8OtEbFsBB7siB8zmGdmu5N4loJKR1EHo9Ptc98eTqeM+qpxsWIrYXa9WfCdlER/3w/Y7V1xOMr1f5dBExFDxtsYjCOSwaGpiGmkgyFEY1XhiSgBEcOSDTfru218J41v+Cmu6X5ZzXxHlNJBXSP7/7TuHx09fZ9llsxtQgkGQliwQRqnzVBVQQpYBTrTyn7b3mN0Zpaqr9QIDAQAB\n-----END CERTIFICATE-----"}'

  process-service:
    container_name: process-service-jvm
    image: quay.io/hsm_devonly/process-service-jvm:2.1.0.SNAPSHOT
    ports:
      - 8080:8080
    depends_on:
      postgres:
        condition: service_started
      process-runtime-service:
        condition: service_started
      process-data-index-service:
        condition: service_started
      keycloak:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/q/health/live" ]
      interval: 1s
      timeout: 1s
      retries: 50
    environment:
      QUARKUS_REST_CLIENT_PROCESS_RUNTIME_SERVICE_URL: http://process-runtime-service-jvm:8080
      QUARKUS_DATASOURCE_DB_KIND: postgresql
      QUARKUS_DATASOURCE_USERNAME: process-service
      QUARKUS_DATASOURCE_PASSWORD: process-service
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/process-service
      QUARKUS_OIDC_AUTH_SERVER_URL: http://keycloak:8080/auth/realms/kogito
      QUARKUS_OIDC_CLIENT_ID: sdm-backend
      QUARKUS_OIDC_CREDENTIALS_SECRET: q9stmmhSsYFyJUzbYVwqZZhQa4vYwYC4
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092

  process-runtime-service:
    container_name: process-runtime-service-jvm
    image: quay.io/hsm_devonly/process-runtime-service-jvm:2.1.1.SNAPSHOT
    ports:
      - 8780:8080
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/q/health/live" ]
      interval: 1s
      timeout: 1s
      retries: 50
    environment:
      KOGITO_SERVICE_URL: http://process-runtime-service:8080
      KOGITO_DATAINDEX_HTTP_URL: http://data-index:8080
      KOGITO_DATAINDEX_WS_URL: ws://data-index:8080
      KOGITO_JOBS_SERVICE_URL: http://jobs-service:8080
      KOGITO_PERSISTENCE_AUTO_DDL: "true"
      KOGITO_PERSISTENCE_TYPE: jdbc
      QUARKUS_DATASOURCE_DB_KIND: postgresql
      QUARKUS_DATASOURCE_USERNAME: process-runtime-service
      QUARKUS_DATASOURCE_PASSWORD: process-runtime-service
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/process-runtime-service
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092

  process-data-index-service:
    container_name: process-data-index-service-jvm
    image: quay.io/hsm_devonly/process-data-index-service-jvm:2.1.0.SNAPSHOT
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/q/health/live" ]
      interval: 1s
      timeout: 1s
      retries: 50
    environment:
      QUARKUS_DATASOURCE_DB_KIND: postgresql
      QUARKUS_DATASOURCE_USERNAME: process-data-index-service
      QUARKUS_DATASOURCE_PASSWORD: process-data-index-service
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/process-data-index-service
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092

  # vue-frontend:
  #   container_name: vue-frontend
  #   image: quay.io/esma3el555/vue-frontend:latest
  #   ports:
  #     - 3000:80
  #   depends_on:
  #     process-service:
  #       condition: service_healthy
  #     graphql-engine:
  #       condition: service_started
  #     keycloak:
  #       condition: service_healthy

  # control-center:
  #   image: confluentinc/cp-enterprise-control-center:${CP_VERSION}
  #   hostname: control-center
  #   container_name: control-center
  #   depends_on:
  #     - kafka
  #   ports:
  #     - 9021:9021
  #   environment:
  #     CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka:29092
  #     CONTROL_CENTER_REPLICATION_FACTOR: 1
  #     CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
  #     CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
  #     CONFLUENT_METRICS_TOPIC_REPLICATION: 1
  #     PORT: 9021

  # mongodb:
  #   image: mongo:latest
  #   container_name: mongodb
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: mongo
  #     MONGO_INITDB_ROOT_PASSWORD: mongo
  #     MONGO_INITDB_DATABASE: data-index
  #   ports:
  #     - 27017:27017
  #   volumes:
  #     - ./mongodb/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  # mongo-express:
  #   image: mongo-express
  #   container_name: mongo-express
  #   ports:
  #     - 8081:8081
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: mongo
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: mongo
  #     ME_CONFIG_MONGODB_URL: mongodb://mongo:mongo@mongodb:27017/
  #   depends_on:
  #     - mongodb

  # data-index:
  #   container_name: data-index
  #   image: quay.io/kiegroup/kogito-data-index-mongodb:${KOGITO_VERSION}
  #   ports:
  #     - 8180:8080
  #   depends_on:
  #     mongodb:
  #       condition: service_started
  #     kafka:
  #       condition: service_started
  #   volumes:
  #     - ./persistence/:/home/kogito/data/protobufs/
  #   environment:
  #     QUARKUS_MONGODB_CONNECTION_STRING: mongodb://data-index:data-index@mongodb:27017/data-index
  #     QUARKUS_MONGODB_DATABASE: data-index
  #     KAFKA_BOOTSTRAP_SERVERS: kafka:29092
  #     KOGITO_DATA_INDEX_PROPS: -Dkogito.protobuf.folder=/home/kogito/data/protobufs/

  # management-console:
  #   container_name: management-console
  #   image: quay.io/kiegroup/kogito-management-console:${KOGITO_VERSION}
  #   ports:
  #     - 8280:8080
  #   depends_on:
  #     data-index:
  #       condition: service_started
  #     keycloak:
  #       condition: service_healthy
  #   volumes:
  #     - ./svg/:/home/kogito/data/svg/
  #   environment:
  #     KOGITO_DATAINDEX_HTTP_URL: http://${DOCKER_GATEWAY_HOST}:8180/graphql
  #     KOGITO_MANAGEMENT_CONSOLE_PROPS: -Dkogito.consoles.keycloak.config.url=http://${DOCKER_GATEWAY_HOST}:8480/auth -Dkogito.consoles.keycloak.config.health-check-url=http://${DOCKER_GATEWAY_HOST}:8480/auth/realms/kogito/.well-known/openid-configuration -Dkogito.svg.folder.path=/home/kogito/data/svg

  # task-console:
  #   container_name: task-console
  #   image: quay.io/kiegroup/kogito-task-console:${KOGITO_VERSION}
  #   ports:
  #     - 8380:8080
  #   depends_on:
  #     data-index:
  #       condition: service_started
  #     keycloak:
  #       condition: service_healthy
  #   environment:
  #     KOGITO_DATAINDEX_HTTP_URL: http://${DOCKER_GATEWAY_HOST}:8180/graphql
  #     KOGITO_TASK_CONSOLE_PROPS: -Dkogito.consoles.keycloak.config.url=http://${DOCKER_GATEWAY_HOST}:8480/auth -Dkogito.consoles.keycloak.config.health-check-url=http://${DOCKER_GATEWAY_HOST}:8480/auth/realms/kogito/.well-known/openid-configuration
